{"version":3,"sources":["webpack:///./node_modules/ng-recaptcha/fesm5/ng-recaptcha.js","webpack:///./src/app/login/login-routing.module.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.scss","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/login/login.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgE;AACkJ;AAC9J;AACA;AACY;;AAEhE,6BAA6B,4DAAc;AAC3C,6BAA6B,4DAAc;AAC3C,0BAA0B,4DAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yEAAiB,oEAAoE,+CAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yEAAiB;AAC7B,gCAAgC,oDAAe;AAC/C;AACA;AACA,0DAA0D,mCAAmC,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,wDAAU;AAClE,QAAQ,gEAAU;AAClB,QAAQ,qDAAO,IAAI,4DAAM,CAAC,yDAAW;AACrC,QAAQ,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AACjD,QAAQ,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AACjD,QAAQ,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AACjD,QAAQ,wDAAU;AAClB;AACA;AACA;AACA,CAAC;;AAED,6BAA6B,4DAAc;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,6CAA6C,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gDAAgD,EAAE;AAC9F,aAAa;AACb;AACA,4CAA4C,wBAAwB,EAAE;AACtE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,iEAAW;AACnB,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd,QAAQ,wDAAU;AAClB;AACA,yBAAyB,wDAAU;AACnC,QAAQ,+DAAS;AACjB;AACA;AACA;AACA,SAAS;AACT,QAAQ,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AACjD,QAAQ,wDAAU,uBAAuB,wDAAU;AACnD;AACA,YAAY,oDAAM;AAClB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,4BAA4B,wDAAU;AACtC,QAAQ,8DAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,wDAAU;AACpD,QAAQ,8DAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;;AAED,gCAAgC,4DAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oDAAM;AACnC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB,yEAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4CAAO;AACnD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iBAAiB;AACtE;AACA;AACA;AACA;AACA,qDAAqD,+BAA+B;AACpF;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC,QAAQ,gEAAU;AAClB,QAAQ,qDAAO,IAAI,4DAAM;AACzB,QAAQ,qDAAO,IAAI,4DAAM,CAAC,yDAAW;AACrC,QAAQ,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AACjD,QAAQ,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AACjD,QAAQ,wDAAU,uBAAuB,oDAAM;AAC/C;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,wBAAwB,wDAAU;AAClC,QAAQ,8DAAQ;AAChB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,oBAAoB;AACpG,iFAAiF,qBAAqB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wDAAU;AACd,QAAQ,kEAAY;AACpB,QAAQ,wDAAU;AAClB,QAAQ,wDAAU;AAClB,QAAQ,wDAAU;AAClB;AACA,0EAA0E,wDAAU;AACpF,QAAQ,+DAAS;AACjB;AACA;AACA;AACA,6BAA6B,gEAAiB;AAC9C;AACA,iCAAiC,gEAAU,cAAc,0CAA0C,EAAE;AACrG,iBAAiB;AACjB;A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","file":"login-login-module.js","sourcesContent":["import { __decorate, __param, __metadata, __read } from 'tslib';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, Optional, Input, HostBinding, Output, Component, ElementRef, NgZone, EventEmitter, NgModule, HostListener, Directive, forwardRef } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, of, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nvar RECAPTCHA_LANGUAGE = new InjectionToken('recaptcha-language');\nvar RECAPTCHA_BASE_URL = new InjectionToken('recaptcha-base-url');\nvar RECAPTCHA_NONCE = new InjectionToken('recaptcha-nonce-tag');\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n    window.ng2recaptchaloaded = function () {\n        onLoaded(grecaptcha);\n    };\n    var script = document.createElement('script');\n    script.innerHTML = '';\n    var baseUrl = url || 'https://www.google.com/recaptcha/api.js';\n    script.src = baseUrl + \"?render=\" + renderMode + \"&onload=ng2recaptchaloaded\" + urlParams;\n    if (nonce) {\n        // tslint:disable-next-line:no-any Remove \"any\" cast once we upgrade Angular to 7 and TypeScript along with it\n        script.nonce = nonce;\n    }\n    script.async = true;\n    script.defer = true;\n    document.head.appendChild(script);\n}\nvar RecaptchaLoaderService = /** @class */ (function () {\n    function RecaptchaLoaderService(\n    // tslint:disable-next-line:no-any\n    platformId, language, baseUrl, nonce) {\n        this.platformId = platformId;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.nonce = nonce;\n        this.init();\n        this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService_1.ready.asObservable() : of();\n    }\n    RecaptchaLoaderService_1 = RecaptchaLoaderService;\n    /** @internal */\n    RecaptchaLoaderService.prototype.init = function () {\n        if (RecaptchaLoaderService_1.ready) {\n            return;\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            var subject_1 = new BehaviorSubject(null);\n            RecaptchaLoaderService_1.ready = subject_1;\n            var langParam = this.language ? '&hl=' + this.language : '';\n            loadScript('explicit', function (grecaptcha) { return subject_1.next(grecaptcha); }, langParam, this.baseUrl, this.nonce);\n        }\n    };\n    /**\n     * @internal\n     * @nocollapse\n     */\n    RecaptchaLoaderService.ready = null;\n    RecaptchaLoaderService = RecaptchaLoaderService_1 = __decorate([\n        Injectable(),\n        __param(0, Inject(PLATFORM_ID)),\n        __param(1, Optional()), __param(1, Inject(RECAPTCHA_LANGUAGE)),\n        __param(2, Optional()), __param(2, Inject(RECAPTCHA_BASE_URL)),\n        __param(3, Optional()), __param(3, Inject(RECAPTCHA_NONCE)),\n        __metadata(\"design:paramtypes\", [Object, String, String, String])\n    ], RecaptchaLoaderService);\n    return RecaptchaLoaderService;\n    var RecaptchaLoaderService_1;\n}());\n\nvar RECAPTCHA_SETTINGS = new InjectionToken('recaptcha-settings');\n\nvar nextId = 0;\nvar RecaptchaComponent = /** @class */ (function () {\n    function RecaptchaComponent(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = \"ngrecaptcha-\" + nextId++;\n        this.resolved = new EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    RecaptchaComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.subscription = this.loader.ready.subscribe(function (grecaptcha) {\n            if (grecaptcha != null && grecaptcha.render instanceof Function) {\n                _this.grecaptcha = grecaptcha;\n                _this.renderRecaptcha();\n            }\n        });\n    };\n    RecaptchaComponent.prototype.ngOnDestroy = function () {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    RecaptchaComponent.prototype.execute = function () {\n        if (this.size !== 'invisible') {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n        else {\n            // delay execution of recaptcha until it actually renders\n            this.executeRequested = true;\n        }\n    };\n    RecaptchaComponent.prototype.reset = function () {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.expired = function () {\n        this.resolved.emit(null);\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.captchaResponseCallback = function (response) {\n        this.resolved.emit(response);\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.grecaptchaReset = function () {\n        var _this = this;\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(function () { return _this.grecaptcha.reset(_this.widget); });\n        }\n    };\n    /** @internal */\n    RecaptchaComponent.prototype.renderRecaptcha = function () {\n        var _this = this;\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n            badge: this.badge,\n            callback: function (response) {\n                _this.zone.run(function () { return _this.captchaResponseCallback(response); });\n            },\n            'expired-callback': function () {\n                _this.zone.run(function () { return _this.expired(); });\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        });\n        if (this.executeRequested === true) {\n            this.executeRequested = false;\n            this.execute();\n        }\n    };\n    __decorate([\n        Input(),\n        HostBinding('attr.id'),\n        __metadata(\"design:type\", Object)\n    ], RecaptchaComponent.prototype, \"id\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], RecaptchaComponent.prototype, \"siteKey\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], RecaptchaComponent.prototype, \"theme\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], RecaptchaComponent.prototype, \"type\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], RecaptchaComponent.prototype, \"size\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], RecaptchaComponent.prototype, \"tabIndex\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], RecaptchaComponent.prototype, \"badge\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], RecaptchaComponent.prototype, \"resolved\", void 0);\n    RecaptchaComponent = __decorate([\n        Component({\n            exportAs: 'reCaptcha',\n            selector: 're-captcha',\n            template: \"\"\n        }),\n        __param(3, Optional()), __param(3, Inject(RECAPTCHA_SETTINGS)),\n        __metadata(\"design:paramtypes\", [ElementRef,\n            RecaptchaLoaderService,\n            NgZone, Object])\n    ], RecaptchaComponent);\n    return RecaptchaComponent;\n}());\n\nvar RecaptchaCommonModule = /** @class */ (function () {\n    function RecaptchaCommonModule() {\n    }\n    RecaptchaCommonModule = __decorate([\n        NgModule({\n            declarations: [\n                RecaptchaComponent,\n            ],\n            exports: [\n                RecaptchaComponent,\n            ],\n        })\n    ], RecaptchaCommonModule);\n    return RecaptchaCommonModule;\n}());\n\nvar RecaptchaModule = /** @class */ (function () {\n    function RecaptchaModule() {\n    }\n    RecaptchaModule_1 = RecaptchaModule;\n    // We need this to maintain backwards-compatibility with v4. Removing this will be a breaking change\n    RecaptchaModule.forRoot = function () {\n        return RecaptchaModule_1;\n    };\n    RecaptchaModule = RecaptchaModule_1 = __decorate([\n        NgModule({\n            exports: [\n                RecaptchaComponent,\n            ],\n            imports: [\n                RecaptchaCommonModule,\n            ],\n            providers: [\n                RecaptchaLoaderService,\n            ],\n        })\n    ], RecaptchaModule);\n    return RecaptchaModule;\n    var RecaptchaModule_1;\n}());\n\nvar RECAPTCHA_V3_SITE_KEY = new InjectionToken('recaptcha-v3-site-key');\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nvar ReCaptchaV3Service = /** @class */ (function () {\n    function ReCaptchaV3Service(zone, siteKey, \n    // tslint:disable-next-line:no-any\n    platformId, baseUrl, nonce) {\n        var _this = this;\n        /** @internal */\n        this.onLoadComplete = function (grecaptcha) {\n            _this.grecaptcha = grecaptcha;\n            if (_this.actionBacklog && _this.actionBacklog.length > 0) {\n                _this.actionBacklog.forEach(function (_a) {\n                    var _b = __read(_a, 2), action = _b[0], subject = _b[1];\n                    return _this.executeActionWithSubject(action, subject);\n                });\n                _this.actionBacklog = undefined;\n            }\n        };\n        this.zone = zone;\n        this.isBrowser = isPlatformBrowser(platformId);\n        this.siteKey = siteKey;\n        this.nonce = nonce;\n        this.baseUrl = baseUrl;\n        this.init();\n    }\n    Object.defineProperty(ReCaptchaV3Service.prototype, \"onExecute\", {\n        get: function () {\n            if (!this.onExecuteSubject) {\n                this.onExecuteSubject = new Subject();\n                this.onExecuteObservable = this.onExecuteSubject.asObservable();\n            }\n            return this.onExecuteObservable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    ReCaptchaV3Service.prototype.execute = function (action) {\n        var subject = new Subject();\n        if (this.isBrowser) {\n            if (!this.grecaptcha) {\n                // todo: add to array of later executions\n                if (!this.actionBacklog) {\n                    this.actionBacklog = [];\n                }\n                this.actionBacklog.push([action, subject]);\n            }\n            else {\n                this.executeActionWithSubject(action, subject);\n            }\n        }\n        return subject.asObservable();\n    };\n    /** @internal */\n    ReCaptchaV3Service.prototype.executeActionWithSubject = function (action, subject) {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            // tslint:disable-next-line:no-any\n            _this.grecaptcha.execute(_this.siteKey, { action: action }).then(function (token) {\n                _this.zone.run(function () {\n                    subject.next(token);\n                    subject.complete();\n                    if (_this.onExecuteSubject) {\n                        _this.onExecuteSubject.next({ action: action, token: token });\n                    }\n                });\n            });\n        });\n    };\n    /** @internal */\n    ReCaptchaV3Service.prototype.init = function () {\n        if (this.isBrowser) {\n            if ('grecaptcha' in window) {\n                this.grecaptcha = grecaptcha;\n            }\n            else {\n                loadScript(this.siteKey, this.onLoadComplete, '', this.baseUrl, this.nonce);\n            }\n        }\n    };\n    ReCaptchaV3Service = __decorate([\n        Injectable(),\n        __param(1, Inject(RECAPTCHA_V3_SITE_KEY)),\n        __param(2, Inject(PLATFORM_ID)),\n        __param(3, Optional()), __param(3, Inject(RECAPTCHA_BASE_URL)),\n        __param(4, Optional()), __param(4, Inject(RECAPTCHA_NONCE)),\n        __metadata(\"design:paramtypes\", [NgZone, String, Object, String, String])\n    ], ReCaptchaV3Service);\n    return ReCaptchaV3Service;\n}());\n\nvar RecaptchaV3Module = /** @class */ (function () {\n    function RecaptchaV3Module() {\n    }\n    RecaptchaV3Module = __decorate([\n        NgModule({\n            providers: [\n                ReCaptchaV3Service,\n            ],\n        })\n    ], RecaptchaV3Module);\n    return RecaptchaV3Module;\n}());\n\nvar RecaptchaValueAccessorDirective = /** @class */ (function () {\n    function RecaptchaValueAccessorDirective(host) {\n        this.host = host;\n    }\n    RecaptchaValueAccessorDirective_1 = RecaptchaValueAccessorDirective;\n    RecaptchaValueAccessorDirective.prototype.writeValue = function (value) {\n        if (!value) {\n            this.host.reset();\n        }\n    };\n    RecaptchaValueAccessorDirective.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n    RecaptchaValueAccessorDirective.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    RecaptchaValueAccessorDirective.prototype.onResolve = function ($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    };\n    __decorate([\n        HostListener('resolved', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], RecaptchaValueAccessorDirective.prototype, \"onResolve\", null);\n    RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = __decorate([\n        Directive({\n            providers: [\n                {\n                    multi: true,\n                    provide: NG_VALUE_ACCESSOR,\n                    // tslint:disable-next-line:no-forward-ref\n                    useExisting: forwardRef(function () { return RecaptchaValueAccessorDirective_1; }),\n                },\n            ],\n            // tslint:disable-next-line:directive-selector\n            selector: 're-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]',\n        }),\n        __metadata(\"design:paramtypes\", [RecaptchaComponent])\n    ], RecaptchaValueAccessorDirective);\n    return RecaptchaValueAccessorDirective;\n    var RecaptchaValueAccessorDirective_1;\n}());\n\nvar RecaptchaFormsModule = /** @class */ (function () {\n    function RecaptchaFormsModule() {\n    }\n    RecaptchaFormsModule = __decorate([\n        NgModule({\n            declarations: [\n                RecaptchaValueAccessorDirective,\n            ],\n            exports: [RecaptchaValueAccessorDirective],\n            imports: [FormsModule, RecaptchaCommonModule],\n        })\n    ], RecaptchaFormsModule);\n    return RecaptchaFormsModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective, RecaptchaCommonModule as ɵa };\n//# sourceMappingURL=ng-recaptcha.js.map\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: LoginComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule {}\r\n","module.exports = \"<div class=\\\"login-page\\\">\\r\\n    <div class=\\\"content\\\">\\r\\n        <!-- <h1 class=\\\"app-name\\\">Dsuite</h1> -->\\r\\n        <form [formGroup]=\\\"form\\\" class=\\\"login-form\\\" fxFlex>\\r\\n            <div class=\\\"text-center\\\">\\r\\n                <h2 class=\\\"app-name\\\">Dsuite Login</h2>\\r\\n            </div>\\r\\n            <div fxFlex  fxlayout=\\\"row\\\" fxlayout.lt-md=\\\"column\\\">\\r\\n                <div fxFlexFill>\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input matInput placeholder=\\\"Email\\\" formControlName=\\\"username\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxFlex  fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\">\\r\\n                <div fxFlexFill>\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxFlex  fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" style=\\\"margin: 20px 0 30px 0\\\">\\r\\n                <!-- <div fxFlex>\\r\\n                    <mat-checkbox color=\\\"primary\\\">Remember Me</mat-checkbox>\\r\\n                </div> -->\\r\\n                <div fxFlex  fxLayoutAlign=\\\"end\\\">\\r\\n                    <!-- <a href=\\\"javascript:void(0)\\\">Forget Password</a> -->\\r\\n                    <re-captcha (resolved)=\\\"resolved($event)\\\" \\r\\n                                formControlName=\\\"recaptchaReactive\\\" \\r\\n                                siteKey=\\\"6LfInckZAAAAAHFxYqXAWcNdr-4V1GFWS9OK4fyx\\\">  \\r\\n                    </re-captcha>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxFlex  fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\">\\r\\n                <div fxFlexFill>\\r\\n                    <button mat-raised-button color=\\\"primary\\\" class=\\\"w-100\\\" (click)=\\\"onLogin()\\\">Login</button>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".login-page {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 100%;\\n  position: relative; }\\n  .login-page .content {\\n    z-index: 1;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center; }\\n  .login-page .content .app-name {\\n      margin-top: 0px;\\n      padding-bottom: 10px;\\n      font-size: 32px; }\\n  .login-page .content .login-form {\\n      padding: 40px;\\n      background: #fff;\\n      width: 25rem;\\n      box-shadow: 0 0 10px #ddd; }\\n  .login-page .content .login-form input:-webkit-autofill {\\n        -webkit-box-shadow: 0 0 0 30px white inset; }\\n  .login-page:after {\\n    content: '';\\n    background: #fff;\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    bottom: 50%;\\n    right: 0; }\\n  .login-page:before {\\n    content: '';\\n    background: #3f51b5;\\n    position: absolute;\\n    top: 50%;\\n    left: 0;\\n    bottom: 0;\\n    right: 0; }\\n  .text-center {\\n  text-align: center; }\\n  .w-100 {\\n  width: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vQzpcXGxvY2FsZGlza1xcbXl3b3JrXFxkc3VpdGVcXGNsaWVudC9zcmNcXGFwcFxcbG9naW5cXGxvZ2luLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksY0FBYTtFQUNiLG9CQUFtQjtFQUNuQix3QkFBdUI7RUFDdkIsYUFBWTtFQUNaLG1CQUFrQixFQXdDckI7RUE3Q0Q7SUFPUSxXQUFVO0lBQ1YsY0FBYTtJQUNiLG9CQUFtQjtJQUNuQix3QkFBdUIsRUFlMUI7RUF6Qkw7TUFZWSxnQkFBZTtNQUNmLHFCQUFvQjtNQUNwQixnQkFBZSxFQUNsQjtFQWZUO01BaUJZLGNBQWE7TUFDYixpQkFBZ0I7TUFDaEIsYUFBWTtNQUNaLDBCQUF5QixFQUk1QjtFQXhCVDtRQXNCZ0IsMkNBQTBDLEVBQzdDO0VBdkJiO0lBNEJRLFlBQVc7SUFDWCxpQkFBZ0I7SUFDaEIsbUJBQWtCO0lBQ2xCLE9BQU07SUFDTixRQUFPO0lBQ1AsWUFBVztJQUNYLFNBQVEsRUFDWDtFQW5DTDtJQXFDUSxZQUFXO0lBQ1gsb0JBQW1CO0lBQ25CLG1CQUFrQjtJQUNsQixTQUFRO0lBQ1IsUUFBTztJQUNQLFVBQVM7SUFDVCxTQUFRLEVBQ1g7RUFFTDtFQUNJLG1CQUFrQixFQUNyQjtFQUNEO0VBQ0ksWUFBVyxFQUNkIiwiZmlsZSI6InNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubG9naW4tcGFnZSB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgLmNvbnRlbnQge1xyXG4gICAgICAgIHotaW5kZXg6IDE7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIC5hcHAtbmFtZSB7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDBweDtcclxuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDEwcHg7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMzJweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmxvZ2luLWZvcm0ge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiA0MHB4O1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xyXG4gICAgICAgICAgICB3aWR0aDogMjVyZW07XHJcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4ICNkZGQ7XHJcbiAgICAgICAgICAgIGlucHV0Oi13ZWJraXQtYXV0b2ZpbGwge1xyXG4gICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMCAzMHB4IHdoaXRlIGluc2V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICY6YWZ0ZXIge1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogMDtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIGJvdHRvbTogNTAlO1xyXG4gICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgfVxyXG4gICAgJjpiZWZvcmUge1xyXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICMzZjUxYjU7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogNTAlO1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgYm90dG9tOiAwO1xyXG4gICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgfVxyXG59XHJcbi50ZXh0LWNlbnRlciB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuLnctMTAwIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { CommonService } from '../services/common.service';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { GenericResp } from '../interfaces/genericResp';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserService } from '../services/user.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    form: FormGroup;\r\n    constructor(private router: Router, public http:HttpClient, public snackBar: MatSnackBar, private userservice:UserService) {}\r\n\r\n    ngOnInit() {\r\n        this.form = new FormGroup({\r\n            'username': new FormControl('',Validators.required),\r\n            'password': new FormControl('',Validators.required),\r\n            'recaptchaReactive' : new FormControl('',Validators.required)\r\n        })\r\n    }\r\n\r\n    async resolved(captchaResponse: string) {\r\n        //console.log(`Resolved response token: ${captchaResponse}`);       \r\n        await this.sendTokenToBackend(captchaResponse);\r\n    }\r\n\r\n    sendTokenToBackend(tok){\r\n        //calling the service and passing the token to the service\r\n        this.http.post(environment.urls.captchaValidation,{recaptcha: tok}).subscribe(\r\n          data => {\r\n            console.log(data)\r\n          },\r\n          err => {\r\n            console.log(err)\r\n          },\r\n          () => {}\r\n        );\r\n    }\r\n\r\n    onLogin() {\r\n        console.log(this.form);\r\n        if(this.form.status == 'VALID'){\r\n            this.http.post(environment.urls.authenticate,this.form.value).subscribe((data:GenericResp) =>{\r\n                if(data.code == 200){\r\n                    let userDetails = {\r\n                        _id: data.data[0]._id,\r\n                        user_id: data.data[0].user_id,\r\n                        username: data.data[0].username,\r\n                        firstname: data.data[0].firstname,\r\n                        lastname: data.data[0].lastname,\r\n                        email: data.data[0].email,\r\n                        role: data.data[0].role,\r\n                        token: data.data[0].token\r\n                    }     \r\n                    this.userservice.user = userDetails;               \r\n                    localStorage.setItem('userdetails', JSON.stringify(userDetails));\r\n                    localStorage.setItem('isLoggedin', 'true');\r\n                    this.router.navigate(['/layout']);\r\n                }else{\r\n                    this.snackBar.open(data.message, \"Error\", {\r\n                        duration: 500,\r\n                      });\r\n                }                \r\n              },error =>{\r\n                this.snackBar.open(error, \"Error\", {\r\n                  duration: 500,\r\n                });\r\n              });            \r\n        }        \r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatButtonModule, MatCheckboxModule, MatInputModule, MatSnackBarModule } from '@angular/material';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\nimport { RecaptchaModule, RecaptchaFormsModule } from 'ng-recaptcha';\r\n//import {MatProgressSpinnerModule} from '@angular/material';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        LoginRoutingModule,\r\n        MatInputModule,\r\n        MatCheckboxModule,\r\n        MatButtonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatSnackBarModule,\r\n        RecaptchaModule,\r\n        RecaptchaFormsModule,\r\n        //MatProgressSpinnerModule,\r\n        FlexLayoutModule.withConfig({addFlexToParent: false})\r\n    ],\r\n    declarations: [LoginComponent]\r\n})\r\nexport class LoginModule {}\r\n"],"sourceRoot":""}